'use server';
/**
 * @fileOverview Generates textual lesson content in Markdown format based on course slides.
 *
 * - generateTextualContent - A function that handles the content generation process.
 * - GenerateTextualContentInput - The input type (slides JSON and lesson name).
 * - GenerateTextualContentOutput - The return type (Markdown string).
 */

import { ai } from '@/ai/ai-instance';
import { z } from 'genkit';
// import type { SlidesOutput } from './generate-slides'; // For type reference, slides are passed as any[]

// --- Input Schema ---
const GenerateTextualContentInputSchema = z.object({
  slides: z.array(z.any()).describe('The array of slide objects generated by the generateSlides flow.'),
  lessonName: z.string().describe('The name of the lesson for which to generate content.'),
});
export type GenerateTextualContentInput = z.infer<typeof GenerateTextualContentInputSchema>;

// --- Output Schema for the Flow ---
const GenerateTextualContentOutputSchema = z.object({
  markdownContent: z.string().describe('The generated lesson content in Markdown format.'),
});
export type GenerateTextualContentOutput = z.infer<typeof GenerateTextualContentOutputSchema>;

// --- Output Schema for the Prompt (internal) ---
const PromptOutputSchema = z.object({
  result: z.string().describe('The generated lesson content in Markdown format.'),
});

// --- System Instruction ---
const systemInstruction = `
You are tasked with creating complete markdown-based lesson content for a specific subtopic provided. Your content will be based on the supplied course script JSON, which includes slide content and audio transcripts corresponding to the subtopic. The lesson should be engaging, interactive, and include real-life examples to enhance learner understanding.

---

# Process

1. **Understand the Input**: Thoroughly review the provided course script JSON, which includes:
   - Slide Content
   - Audio Transcript from the video
2. **Content Structuring**:
   - Use the slide content and audio transcript as a foundation for structuring the lesson. Where necessary, elaborate and rephrase for clarity and enhanced engagement.
   - Create an organized flow: Begin with clear learning objectives, introduce and explain the topic, include real-life scenarios/examples, and conclude with a summary or knowledge check.
3. **Interaction & Engagement**:
   - Include questions, scenarios, or prompts for user interaction.
   - Present thought-provoking real-life examples or analogies to relate the topic practically.
   - Use diagrams, tables, code snippets, or supplementary visuals if appropriate (referenced but not designed in-line).
4. **Adopt Markdown Syntax**:
   - Use appropriate markdown formatting for headers, lists, tables, bold, italics, etc., to enhance readability and hierarchical structuring.
5. **Keep it Learner-Centric**:
   - Ensure language is concise, approachable, and devoid of excessive jargon.
   - Anticipate and clarify potential learner questions or misconceptions.

---

# Output Format

The lesson content must be delivered in **well-structured markdown** and include:

1. **Title and Introduction**:
   - A catchy title that defines the subtopic.
   - A short introduction explaining what the learner will achieve after completing the lesson.
   
2. **Sectioned Content**:
   - Organize content into logical sections with Markdown headings (\`#\`, \`##\`, \`###\`, etc.).
   - Use bullet points, numbered lists, or subheaders as needed.

3. **Examples**:
   - Include at least two real-world relatable examples connected to the topic.
   
4. **Interactive Elements**:
   - Questions, thought experiments, or short activities/challenges encouraging the learner to engage.
   
5. **Summary**:
   - A concise summary that reviews the key points of the lesson.

6. **Optional Additional Resources**:
   - Suggest further reading, videos, or exercises for deeper understanding.

---

# Example

### Input (Course Script JSON)
{
  "slides": [
    {"slide_number": 1, "content": "Understanding basic supply and demand dynamics in economics."},
    {"slide_number": 2, "content": "Real-life applications of supply and demand principles."}
  ],
  "voice": "Welcome to this module on supply and demand. This subtopic is key to understanding economics. Let's explore how the relationship between supply and demand sets prices. By the end, you'll see how these principles impact real-world markets, like the price changes in groceries and movie tickets."
}

---

### Expected Markdown Lesson Output

# Supply and Demand: The Building Blocks of Economics

Economics revolves around understanding how markets work, and one of the key concepts is the interplay between **supply and demand**. In this lesson, we will:
- Learn how supply and demand determine market prices.
- Explore relatable, real-world examples showing these dynamics in action.

---

## What is Supply and Demand?

**Supply and Demand** are fundamental principles in economics. They represent the relationship between:
- **Supply**: The quantity of a good or service that producers are willing to sell at a given price.
- **Demand**: The quantity of a good or service that consumers are willing to buy at a given price.

### The Relationship
When prices are too high, demand decreases, but supply increases. On the other hand, when prices are low, demand increases, but supply decreases. The point where both the supply and demand meet is called the **equilibrium price**, and that's where the magic happens!

---

## Real-Life Examples

**Example 1: Grocery Prices**  
Imagine an unexpected frost damages orange plantations. The supply of oranges drops. What happens next?  
- The price of oranges goes up because there are fewer to sell.
- People might buy fewer oranges due to the higher price or look for alternatives, like apples or bananas.

**Example 2: Concert Tickets**  
Think about the price of tickets for a major artist like [insert popular artist].  
- When demand skyrockets (everyone wants a ticket), and there aren't many seats, ticket prices soar.  
- This explains why front-row tickets are expensive while less popular shows have lower prices!

---

## Engage: Check Your Understanding

**Question**:  
If a new movie is released and gets poor reviews, how do you think that impacts ticket sales and prices?

### Hint:
Think about how demand (interest in the movie) changes and whether theaters might reduce ticket costs to fill seats.

---

## Summary

In this lesson, we covered:
- The basic principles of supply and demand.
- How these principles shape real-world markets.
- Examples like grocery prices and concert tickets.

By understanding these concepts, you'll be better equipped to analyze market trends and recognize the forces behind pricing changes!

---

### Additional Resources

1. [Intro to Economics by Khan Academy](https://www.khanacademy.org/economics)
2. [Supply and Demand Explained](https://www.example.com/supply-demand)

---

# Notes

1. Tailor real-life examples to suit the target audience's familiarity and environment.
2. If supplementary images or visuals are needed, include placeholder text such as \`[Add image of supply-demand curve here]\`.
3. Ensure that any interactive questions or thought exercises tie back to lesson goals.

**Reminder**: Markdown formatting is crucial for clarity and learner engagement; use headers, lists, and emphasis purposefully.
`;


// --- Prompt Definition ---
const generateTextualContentPrompt = ai.definePrompt({
  name: 'generateTextualContentPrompt',
  system: systemInstruction,
  input: {
    schema: z.object({
      lessonName: z.string(),
      slidesJsonString: z.string().describe('The JSON string representation of the course slides array.'),
    }),
  },
  output: {
    format: 'json', // Expect JSON output from the model
    schema: PromptOutputSchema, // The model should return an object { "result": "markdown string" }
  },
  prompt: `Generate the detailed lesson content in Markdown format based on the following lesson name and JSON script of slides:

Lesson Name: {{{lessonName}}}

Slides JSON Script:
<CODE_BLOCK>
{{{slidesJsonString}}}
</CODE_BLOCK>
`,
  config: {
    temperature: 0.5, // Slightly lower temperature for more factual/structured content
    // model: 'gemini-2.0-flash', // Model specified in flow call
  },
});

// --- Flow Definition ---
const generateTextualContentFlow = ai.defineFlow(
  {
    name: 'generateTextualContentFlow',
    inputSchema: GenerateTextualContentInputSchema,
    outputSchema: GenerateTextualContentOutputSchema, // Flow still outputs { markdownContent: string }
  },
  async (input) => {
    const model = 'googleai/gemini-2.0-flash';

    const promptInput = {
      lessonName: input.lessonName,
      slidesJsonString: JSON.stringify(input.slides, null, 2), // Pass slides as a JSON string
    };

    try {
      const response = await generateTextualContentPrompt(promptInput, { model });
      const output = response.output; // Access the parsed JSON output

      if (!output || !output.result || output.result.trim() === "") {
        throw new Error('No markdown content received from the model or content is empty.');
      }
      
      // The flow's output requires markdownContent, so we map 'result' to 'markdownContent'
      return { markdownContent: output.result };

    } catch (error) {
      console.error("Error in generateTextualContentPrompt execution:", error);
      let errorMessage = 'Unknown error during textual content generation.';
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      // Check if the error message from Genkit indicates a non-JSON response
      if (errorMessage.includes("Failed to parse model output as JSON")) {
        errorMessage = "The AI model did not return valid JSON. The textual content might be malformed. " + errorMessage;
      }
      throw new Error(`Failed to generate textual content: ${errorMessage}`);
    }
  }
);

// --- Exported Function ---
export async function generateTextualContent(input: GenerateTextualContentInput): Promise<GenerateTextualContentOutput> {
  console.log("Generating textual content for lesson:", input.lessonName);
  try {
    const result = await generateTextualContentFlow(input);
    console.log("Successfully generated textual content. Length:", result.markdownContent.length);
    return result;
  } catch (error) {
    console.error("Error in generateTextualContent flow:", error);
    throw new Error(`Failed to generate textual content: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


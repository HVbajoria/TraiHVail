'use server';
/**
 * @fileOverview Summarizes generated course slides or textual lesson content into a detailed module description.
 *
 * - summarizeLearningContent - A function that handles the content summarization process.
 * - SummarizeLearningContentInput - The input type (JSON slide data or textual lesson content).
 * - SummarizeLearningContentOutput - The return type (formatted string summary).
 */

import { ai } from '@/ai/ai-instance';
import { z } from 'genkit';
// import type { SlidesOutput } from './generate-slides'; // Not directly needed as slides are any[]

// --- Input Schema ---
const SummarizeLearningContentInputSchema = z.object({
  slides: z.array(z.any()).optional().describe('The array of slide objects generated by the generateSlides flow.'),
  textualLessonContent: z.string().optional().describe('The textual content of the lesson in Markdown format.'),
  submoduleName: z.string().describe('The name of the submodule being summarized.'),
}).refine(data => data.slides || data.textualLessonContent, {
  message: "Either 'slides' or 'textualLessonContent' must be provided.",
});
export type SummarizeLearningContentInput = z.infer<typeof SummarizeLearningContentInputSchema>;


// --- Output Schema ---
const SummarizeLearningContentOutputSchema = z.object({
  summary: z.string().describe('The detailed module description formatted in the specified Unstop format.'),
});
export type SummarizeLearningContentOutput = z.infer<typeof SummarizeLearningContentOutputSchema>;


// --- System Instruction ---
const systemInstruction = `Generate a detailed module description for a course based on the provided script (JSON slides and/or textual lesson content), ensuring clarity, logical structure, and technical accuracy while using an engaging and interactive tone to promote learner interest.

The module description will support an AI system in delivering an interactive Q&A experience for users.

# Steps

1. **Extract and organize content** from the provided materials, which may include:
   - The **transcript** of the dialogue or narration given as voiceover in the JSON script.
   - Summaries of **visual elements** such as slides, diagrams, or charts from JSON script.
   - Any **code snippets** shown, maintaining exact syntax and formatting from JSON script or textual content.
   - The **main textual content** of the lesson if provided.
2. Break down the extracted material into logical sections based on the flow, content topics, and learning objectives of the module.
3. Craft a **learner-centric narrative** that clearly explains the technical ideas, provides real-world context, and aligns with the module’s goals.
4. Include clear **headings and subheadings** for each section, guiding learners through an easy-to-navigate structure.
5. Preserve an **engaging tone** while maintaining clarity and technical precision.
6. Where appropriate, add **examples of code, visuals, or scenarios** using placeholders or direct snippets to illustrate concepts.

# Output Format

The output should strictly follow the "Unstop" format with the structure outlined below:

\`\`\`
<<Unstop>>

Here is the current lesson:

---

### [Module Title]
[Start with a short, engaging paragraph introducing the module topic, highlighting its relevance and importance.]

### What You'll Learn
[State the key learning objectives of the module in clear, concise bullet points or a short paragraph. Make it clear what learners will achieve by the end of the module.]

### Instructional Content
[Break down the main content of the module into logical sections with subheadings if needed. Keep explanations concise, clear, and engaging. Include any code snippets, visual descriptions, diagrams, or scenarios here.]

[For example:]
#### Writing Your First Python Program  
Crafting a simple Python program is a thrilling first step in programming. Here’s a classic example of the \`print()\` function:  

\`\`\`python
print("Hello, World!")
\`\`\`

The \`print()\` function outputs text to the screen, and this seemingly small step introduces us to Python's syntax and purpose — clear communication between humans and computers.

#### Why Code Formatting Matters  
[Placeholder for additional content depending on the video—this could explain indentation, syntax rules, or program execution.]

### Why It Matters  
[Explain the practical significance of the module in an engaging manner. Connect the material to real-world applications or outcomes.]

### Learn by Doing  
[Optional: Include a sample exercise or challenge that learners can try on their own. Use placeholders if specific tasks are not provided.]

---
\`\`\`

# Notes

- **Instructional Clarity**: Content must be digestible and easy to follow, ensuring that it caters to learners of varying skill levels. 
- **Consistency**: Ensure compliance with the specific format provided above for seamless integration with Q&A systems.
- **Examples and Visuals**: Code snippets, diagrams, and visual summaries should be fully detailed or use placeholders where appropriate to maintain accuracy and engagement.
- **Tone**: Keep the tone engaging and inspirational while delivering technically accurate insights. 
`;

// --- Prompt Definition ---
const summarizePrompt = ai.definePrompt({
  name: 'summarizeLearningContentPrompt',
  system: systemInstruction,
  input: {
    schema: z.object({
        submoduleName: z.string(),
        slidesJson: z.string().optional().describe('The JSON string representation of the generated slides array.'),
        lessonText: z.string().optional().describe('The textual content of the lesson in Markdown format.'),
    })
  },
  output: { // The prompt itself will return a string, but the flow wraps it in the schema
    format: 'json', // Request JSON from the model directly as the output schema is an object
    schema: SummarizeLearningContentOutputSchema,
  },
  prompt: `Generate the detailed module description in the specified Unstop format based on the following submodule name and learning materials:

Submodule Name: {{{submoduleName}}}

{{#if slidesJson}}
Slides JSON Script:
<CODE_BLOCK>
{{{slidesJson}}}
</CODE_BLOCK>
{{/if}}

{{#if lessonText}}
This is the lesson textual content:
<TEXT_BLOCK>
{{{lessonText}}}
</TEXT_BLOCK>
{{/if}}
`,
   config: {
     temperature: 0.6,
      safetySettings: [
            { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_NONE' },
            { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_NONE' },
            { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_NONE' },
            { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_NONE' },
      ],
   },
});

// --- Flow Definition ---
const summarizeLearningContentFlow = ai.defineFlow(
    {
        name: 'summarizeLearningContentFlow',
        inputSchema: SummarizeLearningContentInputSchema,
        outputSchema: SummarizeLearningContentOutputSchema,
    },
    async (input) => {
        const model = 'googleai/gemini-2.0-flash';

        const promptInput = {
            submoduleName: input.submoduleName,
            slidesJson: input.slides ? JSON.stringify(input.slides, null, 2) : undefined,
            lessonText: input.textualLessonContent,
        };

        try {
            const response = await summarizePrompt(promptInput, { model });
            const output = response.output; // This should be the object matching SummarizeLearningContentOutputSchema

            if (!output || !output.summary) {
                throw new Error('No summary content received from the model or output format is incorrect.');
            }

            if (!output.summary.trim().startsWith('<<Unstop>>')) {
                console.warn("Generated summary might not be in the correct <<Unstop>> format. Attempting to wrap.");
                output.summary = `<<Unstop>>\n\n${output.summary.trim()}\n`;
            }

            return output;

        } catch (error) {
            console.error("Error in summarizePrompt execution:", error);
            let errorMessage = 'Unknown error during content summarization.';
             if (error instanceof Error) {
                errorMessage = error.message;
            }
            throw new Error(`Failed to summarize content: ${errorMessage}`);
        }
    }
);


// --- Exported Function ---
export async function summarizeLearningContent(input: SummarizeLearningContentInput): Promise<SummarizeLearningContentOutput> {
    console.log("Summarizing content for submodule:", input.submoduleName, input.textualLessonContent ? "with textual content" : "with slides");
    try {
         const result = await summarizeLearningContentFlow(input);
         console.log("Successfully generated content summary.");
         return result;
    } catch (error) {
         console.error("Error in summarizeLearningContent flow:", error);
         throw new Error(`Failed to summarize learning content: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
}


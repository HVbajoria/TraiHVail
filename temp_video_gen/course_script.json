{
  "slides": [
    {
      "content": "Explore the importance of version control and how Git revolutionizes software development.",
      "slideNumber": 1,
      "title": "Welcome to Version Control 101",
      "type": "title_slide",
      "subtitle": "Mastering Git for Collaborative Software Development",
      "transition": "slide_up",
      "voiceover": "Welcome to Version Control 101! In this module, you'll learn about the importance of version control and how Git revolutionizes software development."
    },
    {
      "content": "Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.",
      "slideNumber": 2,
      "title": "What is Version Control?",
      "type": "content_slide",
      "transition": "slide_left",
      "voiceover": "Version control is a system that meticulously tracks changes to files, allowing you to revert to specific versions whenever needed."
    },
    {
      "points": [
        "Collaboration"
      ],
      "slideNumber": 3,
      "title": "Why Use Version Control?",
      "type": "unordered_list_slide",
      "transition": "slide_right",
      "voiceover": "Version control enhances collaboration by allowing multiple developers to work on the same project simultaneously."
    },
    {
      "points": [
        "Collaboration",
        "Backup and Restore"
      ],
      "slideNumber": 4,
      "title": "Why Use Version Control?",
      "type": "unordered_list_slide",
      "transition": "slide_right",
      "voiceover": "It provides a robust backup and restore mechanism, safeguarding your project against data loss."
    },
    {
      "points": [
        "Collaboration",
        "Backup and Restore",
        "Change Tracking"
      ],
      "slideNumber": 5,
      "title": "Why Use Version Control?",
      "type": "unordered_list_slide",
      "transition": "slide_right",
      "voiceover": "Change tracking is simplified, making it easier to identify and fix bugs or issues."
    },
    {
      "points": [
        "Collaboration",
        "Backup and Restore",
        "Change Tracking",
        "Experimentation"
      ],
      "slideNumber": 6,
      "title": "Why Use Version Control?",
      "type": "unordered_list_slide",
      "transition": "slide_right",
      "voiceover": "You can experiment with new features without fear, knowing you can always revert to a stable version."
    },
    {
      "code": "# Initialize a new Git repository in the current directory\ngit init\n\n# Add a file to the staging area\ngit add myfile.txt\n\n# Commit the changes with a message\ngit commit -m \"Initial commit: Added myfile.txt\"",
      "slideNumber": 7,
      "title": "Basic Git Commands - Part 1",
      "type": "code_slide",
      "lexer": "bash",
      "transition": "slide_right",
      "voiceover": "Let's look at some basic Git commands, starting with initializing a repository, adding a file, and committing the changes."
    },
    {
      "code": "# Check the status of your repository\ngit status\n\n# View the commit history\ngit log\n\n# Create a new branch\ngit branch feature/new-feature",
      "slideNumber": 8,
      "title": "Basic Git Commands - Part 2",
      "type": "code_slide",
      "lexer": "bash",
      "transition": "slide_right",
      "voiceover": "These commands help you check the status of your repository, view commit history, and create new branches for development."
    },
    {
      "code": "# Switch to the new branch\ngit checkout feature/new-feature\n\n# Merge the branch into the main branch\ngit merge feature/new-feature\n\n# Push the changes to a remote repository\ngit push origin main",
      "slideNumber": 9,
      "title": "Basic Git Commands - Part 3",
      "type": "code_slide",
      "lexer": "bash",
      "transition": "slide_right",
      "voiceover": "Finally, we'll cover switching to a new branch, merging it into the main branch, and pushing the changes to a remote repository."
    },
    {
      "chartType": "bar",
      "data": [
        {
          "label": "2018",
          "value": 60
        },
        {
          "label": "2019",
          "value": 75
        },
        {
          "label": "2020",
          "value": 85
        },
        {
          "label": "2021",
          "value": 92
        },
        {
          "label": "2022",
          "value": 98
        }
      ],
      "slideNumber": 10,
      "title": "Git Adoption Over the Years",
      "type": "chart_slide",
      "transition": "slide_left",
      "voiceover": "This bar chart shows the increasing adoption of Git over the years, highlighting its growing importance in software development.",
      "xLabel": "Year",
      "yLabel": "Adoption Rate (%)"
    },
    {
      "formula": "Commit = Snapshot + Metadata",
      "slideNumber": 11,
      "title": "Understanding Git Commits",
      "type": "formula_slide",
      "explanation": "A Git commit is more than just a snapshot of your files; it also includes metadata like the author, timestamp, and commit message.",
      "transition": "slide_up",
      "voiceover": "A Git commit is essentially a snapshot of your project's files at a specific point in time, along with metadata about the commit."
    },
    {
      "options": [
        "Centralized Version Control",
        "Distributed Version Control",
        "Local Version Control",
        "None of the above"
      ],
      "question": "Git is an example of which type of version control system?",
      "slideNumber": 12,
      "title": "Quiz: Type of Version Control",
      "type": "quiz_slide",
      "transition": "slide_down",
      "voiceover": "Let's test your understanding. Git is an example of which type of version control system?"
    },
    {
      "content": "The correct answer is: Distributed Version Control. Git is a distributed version control system, meaning every developer has a full copy of the repository.",
      "slideNumber": 13,
      "title": "Answer and Explanation",
      "type": "content_slide",
      "transition": "slide_left",
      "voiceover": "The correct answer is 'Distributed Version Control.' In Git, every developer has a complete copy of the repository, allowing for offline work and greater redundancy."
    },
    {
      "content": "Version control is essential for collaboration, backup, and change tracking. Git is a powerful distributed version control system widely used in software development.",
      "slideNumber": 14,
      "title": "Key Takeaways",
      "type": "content_slide",
      "transition": "slide_left",
      "voiceover": "In summary, version control is crucial for modern software development, and Git is a powerful tool for managing changes and collaborating effectively."
    }
  ]
}
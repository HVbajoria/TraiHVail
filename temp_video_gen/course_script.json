{
  "slides": [
    {
      "content": "Welcome to Git Commands Demystified! In this module, we'll explore essential Git commands with practical examples to boost your version control skills.",
      "slideNumber": 1,
      "title": "Git Commands Demystified",
      "type": "title_slide",
      "imagePrompt": "Prompt: A visually appealing and modern background image representing Git and version control, featuring interconnected nodes, branches, and a central repository. No text. \nImage Description:\nBackground: Dark, gradient blue to black.\nElements: The image should feature a dynamic and modern visual representation of Git and version control. This includes interconnected nodes representing commits, branches diverging and merging, and a central repository. The design should be clean, with a professional aesthetic, and incorporate a cohesive color scheme (e.g., using shades of blue, green, and orange for data differentiation). The overall composition should suggest data flow, connections, and insights.\nText: None. The focus is entirely on the visual representation of the process.",
      "imageRatio": "9:16",
      "subtitle": "Mastering Version Control with Practical Examples",
      "transition": "dissolve",
      "voiceover": "Hello and welcome! In this module, we're diving into Git â€“ the cornerstone of modern software development. We'll break down essential Git commands and show you how to use them effectively."
    },
    {
      "content": "Git is a distributed version control system that tracks changes to your files. It allows you to manage your project's history, collaborate with others, and revert to previous versions.",
      "slideNumber": 2,
      "title": "What is Git?",
      "type": "content_slide",
      "imagePrompt": "Prompt: An infographic illustrating the basic Git workflow: working directory, staging area, and repository. No text should be there at all. \nImage Description:\nBackground: Light grey.\nElements: The infographic should visually represent the Git workflow. It should include elements like the working directory (files being edited), the staging area (files ready to commit), and the repository (where commits are stored). The design should be clean and modern, using a color palette that is easy on the eyes (e.g., blues and greens). The flow should be logical and easy to follow.\nText: None. The focus is entirely on the visual representation of the process.",
      "imageRatio": "1:1",
      "transition": "fade_in",
      "voiceover": "Git is a version control system that tracks changes to your files over time. This allows you to manage your project's history, collaborate with others, and revert to previous versions."
    },
    {
      "points": [
        "git init"
      ],
      "slideNumber": 3,
      "title": "Essential Git Commands",
      "type": "unordered_list_slide",
      "voiceover": "Let's start with some essential Git commands. First up is 'git init'. This command initializes a new Git repository in your project directory."
    },
    {
      "points": [
        "git init",
        "git add"
      ],
      "slideNumber": 4,
      "title": "Essential Git Commands",
      "type": "unordered_list_slide",
      "voiceover": "Next, we have 'git add'. This command adds changes in your working directory to the staging area, preparing them for a commit."
    },
    {
      "points": [
        "git init",
        "git add",
        "git commit"
      ],
      "slideNumber": 5,
      "title": "Essential Git Commands",
      "type": "unordered_list_slide",
      "voiceover": "Then, we have 'git commit'. This command records the staged changes as a snapshot in time. It's like saving a version of your project."
    },
    {
      "points": [
        "git init",
        "git add",
        "git commit",
        "git status"
      ],
      "slideNumber": 6,
      "title": "Essential Git Commands",
      "type": "unordered_list_slide",
      "voiceover": "Next we have 'git status'. This command shows the state of your working directory and staging area. It's your go-to command to see what's changed."
    },
    {
      "points": [
        "git init",
        "git add",
        "git commit",
        "git status",
        "git log"
      ],
      "slideNumber": 7,
      "title": "Essential Git Commands",
      "type": "unordered_list_slide",
      "voiceover": "Then, we have 'git log'. This command displays the commit history of your repository. It shows you the commits, their authors, and their messages."
    },
    {
      "points": [
        "git init",
        "git add",
        "git commit",
        "git status",
        "git log",
        "git pull"
      ],
      "slideNumber": 8,
      "title": "Essential Git Commands",
      "type": "unordered_list_slide",
      "voiceover": "Next we have 'git pull'. This command fetches and merges changes from a remote repository into your current branch. It's how you get the latest updates from others."
    },
    {
      "points": [
        "git init",
        "git add",
        "git commit",
        "git status",
        "git log",
        "git pull",
        "git push"
      ],
      "slideNumber": 9,
      "title": "Essential Git Commands",
      "type": "unordered_list_slide",
      "voiceover": "Finally, we have 'git push'. This command uploads local repository content to a remote repository. It's how you share your work with others."
    },
    {
      "code": "git init",
      "slideNumber": 10,
      "title": "Command in Action: git init",
      "type": "code_slide",
      "lexer": "bash",
      "voiceover": "Let's see 'git init' in action. Navigate to your project directory in the terminal and type 'git init'. This creates a new Git repository."
    },
    {
      "code": "git add .",
      "slideNumber": 11,
      "title": "Command in Action: git add",
      "type": "code_slide",
      "lexer": "bash",
      "voiceover": "Now, let's stage all the files. Use 'git add .' to stage all changes in the current directory. Or you can specify individual files."
    },
    {
      "code": "git commit -m \"Initial commit\"",
      "slideNumber": 12,
      "title": "Command in Action: git commit",
      "type": "code_slide",
      "lexer": "bash",
      "voiceover": "Now, let's commit the changes. Type 'git commit -m \"Your commit message\"'. Replace \"Your commit message\" with a descriptive message about the changes you've made."
    },
    {
      "code": "git status",
      "slideNumber": 13,
      "title": "Command in Action: git status",
      "type": "code_slide",
      "lexer": "bash",
      "voiceover": "Use 'git status' to check the status of your repository. This command tells you which files are staged, unstaged, or untracked."
    },
    {
      "code": "git log",
      "slideNumber": 14,
      "title": "Command in Action: git log",
      "type": "code_slide",
      "lexer": "bash",
      "voiceover": "Use 'git log' to view the commit history. This shows you all the commits made, along with their messages and authors."
    },
    {
      "code": "git pull origin main",
      "slideNumber": 15,
      "title": "Command in Action: git pull",
      "type": "code_slide",
      "lexer": "bash",
      "voiceover": "Use 'git pull origin main' to fetch and merge changes from the 'main' branch of the remote repository named 'origin'."
    },
    {
      "code": "git push origin main",
      "slideNumber": 16,
      "title": "Command in Action: git push",
      "type": "code_slide",
      "lexer": "bash",
      "voiceover": "Use 'git push origin main' to push your local commits to the 'main' branch of the remote repository named 'origin'."
    },
    {
      "content": "What command is used to stage all changes in the current directory?",
      "slideNumber": 17,
      "title": "Quiz: Git Commands",
      "type": "content_slide",
      "transition": "fade_in",
      "voiceover": "Let's test your knowledge with a quick quiz. What command do you use to stage all changes in the current directory?"
    },
    {
      "options": [
        "git commit",
        "git add .",
        "git push",
        "git status"
      ],
      "question": "What command is used to stage all changes in the current directory?",
      "slideNumber": 18,
      "title": "Quiz: Git Commands - Options",
      "type": "quiz_slide",
      "voiceover": "Here are your options. Take a moment to consider your answer."
    },
    {
      "content": "The correct answer is: git add . This command stages all changes in the current directory, preparing them to be committed.",
      "slideNumber": 19,
      "title": "Quiz Answer and Explanation",
      "type": "content_slide",
      "imagePrompt": "Prompt: A visual representation of the 'git add .' command, showing files moving from the working directory to the staging area. No text should be there at all. \nImage Description:\nBackground: Light blue.\nElements: The image should depict the 'git add .' command in action. This includes files from the working directory being moved to the staging area. The design should be modern and professional, using a color palette that is easy on the eyes (e.g., blues and greens). The flow should be logical and easy to follow.\nText: None. The focus is entirely on the visual representation of the process.",
      "imageRatio": "4:3",
      "voiceover": "The correct answer is 'git add .'. This command stages all changes in the current directory."
    },
    {
      "content": "Mastering Git commands is essential for effective version control and collaboration. Practice these commands regularly to build your proficiency.",
      "slideNumber": 20,
      "title": "Key Takeaways",
      "type": "content_slide",
      "voiceover": "In summary, mastering Git commands is crucial for effective version control and collaboration. Practice these commands regularly to build your proficiency."
    }
  ]
}